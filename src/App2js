
import { useEffect, useRef, useState } from 'react';
import './App.css';
import io from "socket.io-client"


import Peer from "simple-peer"



const App2 = () => {




  const [myStream, setMyStream] = useState();
  const [videoTrack, setVideoTrack] = useState({});
  const [audioTrack, setAudioTrack] = useState({});
  const [videoStatus, setVideoStatus] = useState(true);
  const [audioStatus, setAudioStatus] = useState(true);
  const [videoUrl, setVideoUrl] = useState("");
  const [mediaRecorder, setMediaRecorder] = useState(null);
  const myVideo = useRef()
  let durationInSeconds = 0;
  let videoBlob = null;

  const handleStartStream = async () => {
    let startTime = 0;
    let chunks = [];

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true,
      });

      if (myVideo.current) {
        myVideo.current.srcObject = stream
      }

      const mediaRecorder = new MediaRecorder(stream);
      setMediaRecorder(mediaRecorder);
      setMyStream(stream);
      setVideoTrack(stream.getTracks().find(track => track.kind === 'video'))
      setAudioTrack(stream.getTracks().find(track => track.kind === 'audio'))

      mediaRecorder.onstart = () => {
        console.log('Record Start!');
        startTime = Date.now();
      };

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        console.log('Record Stop!');
        videoBlob = new Blob(chunks, { type: 'video/webm' });
        const endTime = Date.now()
        if (startTime !== null) {
          durationInSeconds = endTime - startTime;
          console.log('Record Time:', durationInSeconds, 'second')
        }
        //sendVideo()
      };

      mediaRecorder.start();

    } catch (error) {
      console.error('getUserMedia veya MediaRecorder hatas覺:', error);
    }
  };

  const HandleStopStream = () => {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') {
      mediaRecorder.stop();
      myStream.getTracks().forEach(track => track.stop());
      setMyStream();
      setVideoTrack();
      console.log('Kay覺t durduruldu');
    } else {
      console.log('Kay覺t durdurulamad覺: mediaRecorder null veya durumu inactive');
    }
  }

  const handleCamera = () => {
    if (videoTrack.enabled) {
      videoTrack.enabled = false
      setVideoStatus(false)
    } else {
      videoTrack.enabled = true
      setVideoStatus(true)
    }
  }

  const handleMic = () => {
    if (audioTrack.enabled) {
      audioTrack.enabled = false
      setAudioStatus(false)
    } else {
      audioTrack.enabled = true
      setAudioStatus(true)
    }
  }

  const sendVideo = async () => {
    const data = { fileDuration: durationInSeconds }

    const fd = new FormData()
    fd.append('file', videoBlob, 'video.mp4')
    fd.append('candidateAnswerDTO', new Blob([JSON.stringify(data)], { type: 'application/json' }));
    setVideoUrl(URL.createObjectURL(videoBlob));
    /*await axios
        .post('http://localhost:8000/start-job/VIDEO', fd, {
            headers: { 'Content-Type': 'multipart/form-data' }
        })
        .catch(reason => console.log(reason))*/
  }


  return (
    <>
      <h1 style={{ textAlign: "center", color: '#fff' }}>Zoomish</h1>
      <div className="container">
        <div className="video-container">
          <div className="video">
            {myStream && <video ref={myVideo} autoPlay style={{ width: "300px" }} />}
          </div>
        </div>

        <div style={{ display: 'flex', gap: '15px', marginTop: '10px' }}>
          <div onClick={() => handleCamera()} style={{ borderRadius: '50%', padding: '15px', backgroundColor: 'black' }}>
            {videoStatus ? "Camera On" : "Camera Off"}
          </div>
          <div onClick={() => handleMic()} style={{ borderRadius: '50%', padding: '15px', backgroundColor: 'black' }}>
            {audioStatus ? "Mic On" : "Mic Off"}
          </div>
          <button onClick={() => handleStartStream()}>Start Record</button>
          <button onClick={() => HandleStopStream()}>Stop Record</button>
        </div>
        <div>
          <div className="caller">
            <h1 >{name} is calling...</h1>
            <button className='btn btn-sm btn-primary' onClick={answerCall}>
              Answer
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default App2;
